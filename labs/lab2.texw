\chapter{Laboratorio 2: il problema dello zaino}

<<>>=
import numpy as np
import random
@

Definiamo una funzione helper per creare istanze arbitrarie del problema: 

<<>>= 
# n is the number of objects to generate
# maxv is the maximum value
def generateInstance(n, maxv = 100):
    w = random.sample(range(1, maxv), n)
    v = random.sample(range(1, maxv), n)
    wBound = max(int(random.random() * maxv), max(w))
    return (list(zip(w, v)), wBound)
@

Definiamo quindi il primo metodo basato sulla matrice dei valori $vOPT$. 
<<>>=
# wv is a list of pairs (w,v)
# wBound is the capacity of the knapsack
# returns a pair (I, v) where v is the optimal value of a solution
# and I is the solution (set of indices)
def knapsackVopt(wv, wBound):
    n = len(wv)
    vOpt = np.zeros((n + 1, wBound + 1), int)
    for i in range(1, n + 1):
        vOpt[i][0] = 0
        for w in range(1, wBound + 1):
            currentItemWv = wv[i-1]
            currentW = currentItemWv[0]
            currentV = currentItemWv[1]
            if w >= currentW:
                vOpt[i][w] = max(vOpt[i-1][w], vOpt[i-1][w-currentW]+currentV)
            else:
                vOpt[i][w] = vOpt[i-1][w]
    I = []
    i = n
    w = wBound
    while i > 0:
        if vOpt[i-1,w] != vOpt[i, w]:
            I.append(i-1)
            w -= wv[i-1][0]
        i -= 1
    return (I,vOpt[n][wBound])
@

<<>>=
a = generateInstance(5, 10)
print(a)
print(knapsackVopt(*a))
@

Definiamo il secondo metodo, basato sulla matrice di pesi $wOPT$. 
<<>>=
# wv is a list of pairs (w,v)
# wBound is the capacity of the knapsack
# returns a pair (I, v) where v is the optimal value of a solution
# and I is the solution (set of indices)
def knapsackWopt(wv, wBound):
    n = len(wv)
    v = [wv[i][1] for i in range(n)]
    w = [wv[i][0] for i in range(n)]
    vMax = max(v)
    nvMax = n * vMax
    # Dynamic programming matrix
    wOpt = np.zeros((n + 1, nvMax + 1))
    print("Dimensione tabella: ", wOpt.nbytes)
    # Initialization
    for a in range(1, nvMax + 1):
        wOpt[0][a] = float('inf')
    # Filling
    for i in range(1, n + 1):
        wOpt[i][0] = 0
        for a in range(1, nvMax + 1):
            wOpt[i][a] = min(
                    wOpt[i - 1][a], 
                    wOpt[i - 1][max(a - v[i - 1], 0)] + w[i - 1])
    # Find the solution value a (on the last row)
    for a in range(nvMax, 0, -1):
        if wOpt[n][a] <= wBound:
            break
    # Reconstruct the solution
    finalV = a
    I = []
    i = n
    b = a
    while i > 0:
        if wOpt[i-1][b] != wOpt[i][b]:
            I.append(i-1)
            b -= v[i-1]
        i -= 1
    return (I,finalV)
@

L'algoritmo $\mathbf{FPTAS}$ utilizza proprio quest'ultimo algoritmo appena definito: 
<<>>=
from math import ceil
def knapsackFPTAS(wv, wBound, epsilon):
    n = len(wv)
    v = [wv[i][1] for i in range(n)]
    w = [wv[i][0] for i in range(n)]
    vMax = max(v)
    theta = max(epsilon * vMax / (2 * n), 1.0)
    vHat = [int(ceil(v[i] / theta)) for i in range(n)]
    print("Prima dell'arrotondamento: ", wv, wBound)
    print("Dopo l'arrotondamento: ", list(zip(w, vHat)), wBound)
    I, opt = knapsackWopt(list(zip(w, vHat)), wBound)
    vOpt = sum([v[i] for i in I])
    return I, vOpt
@

<<>>=
a = generateInstance(15, 10000)
Iexact, vexact = knapsackWopt(*a)
I, v = knapsackFPTAS(*a, 0.3)
print(Iexact, vexact)
print(I, v)
@
